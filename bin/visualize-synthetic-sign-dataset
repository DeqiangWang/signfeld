#!/usr/bin/env python
import argparse
import cv2


def main(args):
  filename_to_boxes = dict()
  with open(args.annotations, "r") as file_handle:
    for line in file_handle:
      filename, x0, y0, x1, y1, class_id = line.rstrip().split(',')
      filename_to_boxes.setdefault(filename, []).append(
          [int(x0), int(y0), int(x1), int(y1), class_id])

  filenames = sorted(filename_to_boxes.keys())

  for filename in filenames:
    print("Showing '{}'".format(filename))

    image = cv2.imread(filename, cv2.IMREAD_COLOR)
    for box in filename_to_boxes[filename]:
      pt1, pt2 = (box[0], box[1]), (box[2], box[3])
      cv2.rectangle(image, pt1, pt2, (0, 0, 255), thickness=2)

      class_name = box[-1]
      text_size = cv2.getTextSize(class_name, cv2.FONT_HERSHEY_PLAIN, 1,
                                  thickness=2)

      pt1 = pt1[0] - 10 - text_size[0][0], pt1[1]
      pt2 = pt1[0] + 10 + text_size[0][0], pt1[1] + 10 + text_size[0][1]
      cv2.rectangle(image, pt1, pt2, (0, 0, 255), -1)

      center = pt1[0] + 5, pt1[1] + 5 + text_size[0][1]
      cv2.putText(image, class_name, center, 1, cv2.FONT_HERSHEY_PLAIN,
                  (255, 255, 255), thickness=2)

    cv2.imshow("Figure", image)
    cv2.waitKey(0)


def parse_args():
  parser = argparse.ArgumentParser()
  parser.add_argument("annotations",
                      help="Path to binary.csv or multiclass.csv")
  return parser.parse_args()


if __name__ == "__main__":
  main(parse_args())
